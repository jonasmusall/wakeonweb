from typing import List, Tuple
import re


# entries: (defineName, path, binary)
files: List[Tuple[str, str, bool]] = [
  ('bodyRoot', 'web/index.html', False),
  ('bodyMainCss', 'web/main.css', False),
  ('bodyFaviconSvg', 'web/favicon.svg', False),
  ('bodyFaviconIco', 'web/favicon.ico', True)
]
# number of bytes per line for binary file outputs
bytesPerLine = 20


# regular expression for minifying text files
reLinebreak = re.compile(r'\r?\n\s*')


# fill lists with (defineName, content) for text and binary files
stringContents: List[Tuple[str, str]] = []
byteContents: List[Tuple[str, bytes]] = []
for defineName, path, bin in files:
  print(defineName, f'binary={bin}')

  if bin:
    with open(path, 'rb') as f:
      byteContents.append((defineName, f.read()))
  else:
    with open(path, 'r') as f:
      content = f.read()
      # escape backslashes and double quotation marks
      content = content.replace('\\', '\\\\').replace('"', '\\"')
      # minify text by stripping out newlines and indentation
      content = reLinebreak.sub('', content)
      stringContents.append((defineName, content))


# write build output to web.h
with open('web.h', 'w') as f:
  print('// Generated by build_web.py. To edit, edit source files in "web" folder and run build_web.py.\n', file=f)

  # text files get pasted into a single line string
  for defineName, content in stringContents:
    print(f'const char {defineName}[] PROGMEM = "{content}";', file=f)

  # binary files get pasted into array byte by byte (hexadecimal format), spread over multiple lines
  for defineName, content in byteContents:
    byteStrings = [f'0x{b:02x}' for b in content]
    print(f'const char {defineName}[] PROGMEM = {{', file=f)
    for i in range(0, len(byteStrings), bytesPerLine):
      bytesInLine = byteStrings[i : i + bytesPerLine]
      # check if the last line of bytes has been reached
      if i < len(byteStrings) - bytesPerLine:
        # not the last line
        print(f'    {", ".join(bytesInLine)}', end=',\n', file=f)
      else:
        # last line, print array closing bracket and semicolon
        print(f'    {", ".join(bytesInLine)}}};', file=f)
